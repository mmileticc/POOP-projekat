/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <fstream>
#include <iostream>
#include <string>
#include <windows.h>
#include "../../../../CLionProjects/POOP projekat 1/Database.h"
using namespace std;
/* Header for class application_Database */

#ifndef _Included_application_Database
#define _Included_application_Database
#ifdef __cplusplus
extern "C" {
#endif
	/*
	 * Class:     application_Database
	 * Method:    createDatabase
	 * Signature: (Ljava/lang/String;)Z
	 */
	JNIEXPORT jboolean JNICALL Java_application_Database_createDatabase
	(JNIEnv* env, jobject, jstring databaseName) {
		//napravi novu bazu fajl i kopiju fajla
		//sacuvaj u fajl
		//sacuvaj i u kopiju fajla
		const char* databaseNameC = env->GetStringUTFChars(databaseName, NULL);
		string dataBaseNameStr(databaseNameC);
		string fileName = dataBaseNameStr + ".mile";
		string fileCopyName = dataBaseNameStr + "copy.mile";

		ofstream outFile(fileName);
		if (!outFile.is_open()) {
			cout << "Neuspesno otvaranje fajla za citanje.\n";
			return false;
		}
		ofstream outFileCopy(fileCopyName);
		if (!outFileCopy.is_open()) {
			cout << "Neuspesno otvaranje copy fajla.\n";
			return false;
		}
		// Relativna putanja do fajla kao široki karakteri (wchar_t)
		LPCWSTR relativePath =(LPCWSTR) fileName.c_str();
		wchar_t absolutePath[MAX_PATH];

		// Dobijanje apsolutne putanje
		DWORD result = GetFullPathNameW(relativePath, MAX_PATH, absolutePath, NULL);
		if (result != 0) {
			wcout << L"Apsolutna putanja do baze ";
			cout << dataBaseNameStr;
			wcout << " je: " << absolutePath;
			cout << "\n";
		}
		else {
			std::wcerr << L"Greska prilikom dobijanja apsolutne putanje! Kod greske: " << GetLastError();
			cout << "\n";
		}
		cout << "Uspesno kreiranje baze " + dataBaseNameStr + "!\n";

	
		
		Database* db = new Database();
		db->exportDBinMyFormat(outFile);
		db->exportDBinMyFormat(outFileCopy);
		return true; 
	}


	/*
	 * Class:     application_Database
	 * Method:    openDatabase
	 * Signature: (Ljava/lang/String;)Z
	 */
	JNIEXPORT jboolean JNICALL Java_application_Database_openDatabase
	(JNIEnv* env, jobject, jstring  databaseName) {
		const char* databaseNameC = env->GetStringUTFChars(databaseName, NULL);
		string dataBaseNameStr(databaseNameC);
		//otvori fajl ako moze ako ne vrati false
		//ucitaj bazu iz fajla
		//ako otvoris napravis mu kopiju fajla
		//sacuvaj bazu u kopiju


		string fileName = dataBaseNameStr + ".mile";
		string fileCopyName = dataBaseNameStr + "copy.mile";

		ifstream inFile(fileName);
		if (!inFile.is_open()) {
			cout << "Neuspesno otvaranje fajla za citanje.\n" + fileName;
			return false;
		}
		ofstream outFileCopy(fileCopyName);
		if (!outFileCopy.is_open()) {
			cout << "Neuspesno otvaranje copy fajla.\n" + fileCopyName;
			return false;
		}
		Database* db = Database::importDB(inFile);
		db->exportDBinMyFormat(outFileCopy);

		cout << "Uspesno otvaranje baze " + dataBaseNameStr + "!\n";

		return true;
	}

	/*
	 * Class:     application_Database
	 * Method:    saveDatabase
	 * Signature: (Z)V
	 */
	JNIEXPORT jboolean JNICALL Java_application_Database_saveDatabase
	(JNIEnv* env, jobject, jstring  databaseName, jboolean andSqlFormat) {
		//ucitaj bazu iz kopije
		//sacuvaj kopiju u original
		const char* databaseNameC = env->GetStringUTFChars(databaseName, NULL);
		string dataBaseNameStr(databaseNameC);

		string fileName = dataBaseNameStr + ".mile";
		string fileCopyName = dataBaseNameStr + "copy.mile";

		ofstream outFile(fileName);
		if (!outFile.is_open()) {
			cout << "Neuspesno otvaranje fajla za cuvanje.\n";
			return false;
		}
		ifstream inFileCopy(fileCopyName);
		if (!inFileCopy.is_open()) {
			cout << "Neuspesno otvaranje copy fajla.\n";
			return false;
		}
		Database* db = Database::importDB(inFileCopy);
		db->exportDBinMyFormat(outFile);
		if (andSqlFormat) {
			ofstream outFileSql(dataBaseNameStr + ".sql");
			if (!outFileSql.is_open()) {
				cout << "Neuspesno otvaranje fajla za cuvanje u sql formatu.\n";
				return false;
			}
			db->exportDBinSQL(outFileSql);
		}

		cout << "Uspesno sacuvavanje baze " + dataBaseNameStr + "\n";
		return true;
	}

	/*
	 * Class:     application_Database
	 * Method:    executeQuery
	 * Signature: (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
	 */
	JNIEXPORT jstring JNICALL Java_application_Database_executeQuery
	(JNIEnv* env, jobject, jstring databaseName, jstring queryText) {
		//otvori bazu iz kopije
		//odradi upit
		//sacuvaj u kopiju
		const char* databaseNameC = env->GetStringUTFChars(databaseName, NULL);
		string dataBaseNameStr(databaseNameC);
		const char* queryTextC = env->GetStringUTFChars(queryText, NULL);
		string queryTextStr(queryTextC);

		string fileCopyName = dataBaseNameStr + "copy.mile";
		ifstream inFileCopy(fileCopyName);
		if (!inFileCopy.is_open()) {
			cout << "Neuspesno otvaranje copy fajla za ucitavanje baze.\n";
			return env->NewStringUTF("Greska! Neuspesno otvaranje fajla baze za ucitavanje baze.\n");;
		}
		Database* db = Database::importDB(inFileCopy);

		string rezultat = db->query(queryTextStr);

		ofstream outFileCopy(fileCopyName);
		if (!outFileCopy.is_open()) {
			cout << "Neuspesno otvaranje copy fajla za sacuvavanje.\n";
			return env->NewStringUTF("Greska! Neuspesno otvaranje copy fajla za sacuvavanje.\n");;
		}
		db->exportDBinMyFormat(outFileCopy);

		
		return env->NewStringUTF(rezultat.c_str());
	}

	/*
	 * Class:     application_Database
	 * Method:    getTablesNames
	 * Signature: ()Ljava/lang/String;
	 */
	JNIEXPORT jstring JNICALL Java_application_Database_getTablesNames
	(JNIEnv* env, jobject, jstring databaseName) {
		//otvori bazu iz kopije
		//dohvati showTablesText i vrati
		const char* databaseNameC = env->GetStringUTFChars(databaseName, NULL);
		string dataBaseNameStr(databaseNameC);
		string fileCopyName = dataBaseNameStr + "copy.mile";
		ifstream inFileCopy(fileCopyName);
		if (!inFileCopy.is_open()) {
			cout << "Neuspesno otvaranje copy fajla.\n";
			return env->NewStringUTF("Greska! Neuspesno otvaranje fajla baze.\n");;
		}
		Database* db = Database::importDB(inFileCopy);

		string showTableStr = db->showTablesText();

		//cout << showTableStr + "\n";

		return env->NewStringUTF(showTableStr.c_str());
	}

#ifdef __cplusplus
}
#endif
#endif
